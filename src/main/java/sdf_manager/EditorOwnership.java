package sdf_manager;

import java.awt.Dimension;
import java.awt.Rectangle;
import java.util.Iterator;

import javax.swing.JFrame;

import org.hibernate.Query;
import org.hibernate.Session;

import pojos.Ownership;
import pojos.SiteOwnership;
import sdf_manager.util.SDF_Util;

/**
 *
 * @author charbda
 */
public class EditorOwnership extends javax.swing.JFrame {

    /** Creates new form EditorRegions */
    private SDFEditor parent;
    private boolean editing = false; //no cascaded actionPerformed
    private int index = -1; //in case of edit of existing habitat
    private final static org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(EditorOwnership.class .getName());

    /**
     *
     * @param parent
     */
    public EditorOwnership(SDFEditor parent) {
        this.parent = parent;
        initComponents();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        centerScreen();
        loadOwnership();
    }

   /**
    * Loads ownerships from reference table
    */
   private void loadOwnership() {
       EditorOwnership.log.info("Loading the ownerships frm reference table");
       cmbCode.removeAllItems();
       Session session = HibernateUtil.getSessionFactory().openSession();
       try {
	       String hql;
	       hql = "select ow.ownershipType from Ownership ow order by ow.ownershipId asc";
	       Query q = session.createQuery(hql);
	       Iterator itr = q.iterate();
	       int i = 0;
	
	       while (itr.hasNext()) {
	           Object obj = itr.next();
	           if (((String) obj).equals("")) continue;
	           cmbCode.insertItemAt(obj, i);
	           i++;
	       }
	       if (i > 0) {
	            cmbCode.setSelectedIndex(0);
	            cmbCode.repaint();
	       }
       } catch (Exception ex) {
    	   log.error("Error while fetching data: " + ex);
       } finally {
    	   session.close();
       }    
   }

   /**
    * Loads the data of the ownerhsip
    * @param s
    * @param index
    */
   public void loadOwnership(SiteOwnership s, int index) {
        EditorOwnership.log.info("Loading the data of the ownerhsip:::" + s.getOwnership().getOwnershipCode());
        this.index = index;
        int ownerShipIndex = getOwnerShipNameByCode(s.getOwnership().getOwnershipCode());
        this.cmbCode.setSelectedIndex(ownerShipIndex - 1);
        this.cmbCode.setEnabled(false);
        this.txtPercent.setText(ConversionTools.doubleToString(s.getOwnershipPercent()));
        this.editing = true;
   }

   /**
    *
    * @param ownerShipCode
    * @return
    */
   private int getOwnerShipNameByCode(String ownerShipCode) {
       int indexOwnerShip = 0;
       Session session = HibernateUtil.getSessionFactory().openSession();
       try {
	       String hql = "select ow.ownershipId from Ownership ow where ow.ownershipCode='" + ownerShipCode + "'";
	
	       Query q = session.createQuery(hql);
	       Iterator itr = q.iterate();
	       if (itr.hasNext()) {
	           indexOwnerShip = ((Integer) itr.next()).intValue();
	       }
	       return indexOwnerShip;
       } catch (Exception ex) {
    	   log.error("Error while fetching data: " + ex);
       } finally {
    	   session.close();
       }    
       return indexOwnerShip;
   }

   /**
    * Close the Ownership editor
    */
   private void exit() {
       this.dispose();
   }

   /**
    *
    */
   private void centerScreen() {
      Dimension dim = getToolkit().getScreenSize();
      Rectangle abounds = getBounds();
      setLocation((dim.width - abounds.width) / 2,
          (dim.height - abounds.height) / 2);
      super.setVisible(true);
      requestFocus();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbCode = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        txtPercent = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(sdf_manager.SDF_ManagerApp.class).getContext().getResourceMap(EditorOwnership.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        jLabel3.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel3.border.title"))); // NOI18N
        jPanel3.setName("jPanel3"); // NOI18N

        jLabel1.setIcon(resourceMap.getIcon("jLabel1.icon")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        cmbCode.setName("cmbCode"); // NOI18N
        cmbCode.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCodeActionPerformed(evt);
            }
        });

        jLabel14.setIcon(resourceMap.getIcon("jLabel14.icon")); // NOI18N
        jLabel14.setText(resourceMap.getString("jLabel14.text")); // NOI18N
        jLabel14.setName("jLabel14"); // NOI18N

        txtPercent.setText(resourceMap.getString("txtPercent.text")); // NOI18N
        txtPercent.setName("txtPercent"); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel14))
                .addGap(38, 38, 38)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbCode, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPercent, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txtPercent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel4.setAutoscrolls(true);
        jPanel4.setName("jPanel4"); // NOI18N

        btnSave.setText(resourceMap.getString("btnSave.text")); // NOI18N
        btnSave.setName("btnSave"); // NOI18N
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setText(resourceMap.getString("btnCancel.text")); // NOI18N
        btnCancel.setName("btnCancel"); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(btnSave)
                .addGap(18, 18, 18)
                .addComponent(btnCancel)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnSave)
                .addComponent(btnCancel))
        );

        //jLabel2.setIcon(resourceMap.getIcon("jLabel2.icon")); // NOI18N
        jLabel2.setIcon(SDF_Util.getIconForLabel(resourceMap, "jLabel2.icon", SDF_ManagerApp.getMode()));
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(247, 247, 247)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(85, 85, 85)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)))
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    } // </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) { //GEN-FIRST:event_btnCancelActionPerformed
        this.exit();
    } //GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) { //GEN-FIRST:event_btnSaveActionPerformed
        String code = (String) cmbCode.getSelectedItem();
        Double percent;
        String msgInfo = "";
        boolean saveOK = false;
        if (code.equals("")) {
            EditorOwnership.log.error("No ownership class provided");
            javax.swing.JOptionPane.showMessageDialog(this, "No ownership class provided.");
        } else if (txtPercent.getText().equals("")) {
            EditorOwnership.log.error("No percentage provided.");
            javax.swing.JOptionPane.showMessageDialog(this, "No percentage provided.");
        } else if ((ConversionTools.stringToDouble(txtPercent.getText())) == 0.0) {
            EditorOwnership.log.error("The percent data is not valid:::" + txtPercent.getText());
            javax.swing.JOptionPane.showMessageDialog(this, "Please provide a valid percentage");
        } else if (!SDF_Util.validatePercent(txtPercent.getText())) {
            EditorOwnership.log.error("The percent data is not valid:::" + txtPercent.getText());
            javax.swing.JOptionPane.showMessageDialog(this, "Please, Provided a valid percentage.");
        } else {
            Session session = HibernateUtil.getSessionFactory().openSession();
            try {
	            Ownership o;
	            String hql = "from Ownership ow where ow.ownershipType like '" + code + "'";
	            percent = ConversionTools.stringToDouble(txtPercent.getText());
	            Query q = session.createQuery(hql);
	            o = (Ownership) q.uniqueResult();
	            if (this.editing && this.index > -1) {
	                /*we're editing an existing ownerShip*/
	                this.parent.saveOwnership(o, percent,this.index);
	                saveOK = true;
	                msgInfo = "OwnerShip saved";
	           } else {
	                if (this.parent.ownershipExists(o)) {
	                    EditorOwnership.log.error("Ownership class already exists. Can't save.");
	                    javax.swing.JOptionPane.showMessageDialog(this, "Ownership class already exists. Can't save.");
	                } else {
	                    this.parent.addOwnership(o, percent);
	                    saveOK = true;
	                    msgInfo = "OwnerShip added";
	                }
	           }
            } catch (Exception ex) {
         	   log.error("Error while fetching data: " + ex);
            } finally {
         	   session.close();
            }    
        }
        EditorOwnership.log.error(msgInfo);

        if (saveOK) {
            javax.swing.JOptionPane.showMessageDialog(this, msgInfo);
            this.exit();
        } else {
            this.setVisible(true);
        }

    } //GEN-LAST:event_btnSaveActionPerformed

    private void cmbCodeActionPerformed(java.awt.event.ActionEvent evt) { //GEN-FIRST:event_cmbCodeActionPerformed
        // TODO add your handling code here:
    } //GEN-LAST:event_cmbCodeActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox cmbCode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField txtPercent;
    // End of variables declaration//GEN-END:variables

}
