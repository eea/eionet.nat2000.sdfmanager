package sdf_manager;

import java.awt.Dimension;
import java.awt.Rectangle;
import java.util.Iterator;

import javax.swing.JFrame;

import org.apache.commons.lang.StringUtils;
import org.hibernate.Query;
import org.hibernate.Session;

import pojos.RefNuts;
import pojos.RefNutsEmerald;
import pojos.Region;
import sdf_manager.util.SDF_Util;

/**
 *
 * @author charbda
 */
public class EditorRegion extends javax.swing.JFrame {
   
    /** Creates new form EditorRegions. */
    private boolean editing = false; //no cascaded actionPerformed
    private SDFEditor parent;
    private String siteCode;
    private final static org.apache.logging.log4j.Logger LOGGER = org.apache.logging.log4j.LogManager.getLogger(EditorRegion.class);

    /**
     *
     * @param parent
     * @param siteCode
     */
    public EditorRegion(SDFEditor parent, String siteCode) {
        this.parent = parent;
        initComponents();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        centerScreen();
        this.siteCode = siteCode;
        loadRegions();
    }

   /**
    * Close the Region Editor.
    */
   private void exit() {
       this.dispose();
   }

   /**
    * Loads the regions from the reference table.
    */
    private void loadRegions() {
        String tableName = SDF_ManagerApp.isEmeraldMode() ? "RefNutsEmerald" : "RefNuts";
        EditorRegion.LOGGER.info("Loading the regions from the reference table " + tableName);
        Session session = HibernateUtil.getSessionFactory().openSession();
        try {
	        String hql = "from " + tableName + " refN order by refN.refNutsCode";
	        Query q = session.createQuery(hql);
	        Iterator itr = q.iterate();
	        int i = 0;
	        this.editing = true;
	        while (itr.hasNext()) {
	            if (SDF_ManagerApp.isEmeraldMode()) {
	                RefNutsEmerald refNE = (RefNutsEmerald) itr.next();
	                cmbCode.insertItemAt(refNE.getRefNutsCode(), i);
	                cmbName.insertItemAt(refNE.getRefNutsCode() + " - " + refNE.getRefNutsDescription(), i);
	            } else {
	                RefNuts refN = (RefNuts) itr.next();
	                cmbCode.insertItemAt(refN.getRefNutsCode(), i);
	                cmbName.insertItemAt(refN.getRefNutsCode() + " - " + refN.getRefNutsDescription(), i);
	            }
	            i++;
	        }
	        this.editing = false;
	        if (i > 0) {
	            cmbCode.setSelectedIndex(0);
	            cmbCode.repaint();
	        }
        } catch (Exception ex) {
     	   LOGGER.error("Error while fetching data: " + ex);
        } finally {
     	   session.close();
        }    
    }


   /**
    *
    */
   private void centerScreen() {
      Dimension dim = getToolkit().getScreenSize();
      Rectangle abounds = getBounds();
      setLocation((dim.width - abounds.width) / 2,
          (dim.height - abounds.height) / 2);
      super.setVisible(true);
      requestFocus();
    }

   /**
    * Check if the region exists for this site.
    * @param codeNut
    * @return
    */
   private boolean isNutExisting(String codeNut) {
        EditorRegion.LOGGER.info("Checking if the region::" + codeNut + " exists for this site::" + this.siteCode);
        boolean nutExist = false;
        Session session = HibernateUtil.getSessionFactory().openSession();
        try {
	        String hql = "select regionCode from Region where regionCode = '" + codeNut + "' and site = '" + this.siteCode + "'";
	        Query q = session.createQuery(hql);
	        Iterator itr = q.iterate();
	        if (itr.hasNext()) {
	            nutExist = true;
	        }
	        return nutExist;
        } catch (Exception ex) {
     	   LOGGER.error("Error while fetching data: " + ex);
        } finally {
     	   session.close();
        }    
        return false;
   }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        cmbName = new javax.swing.JComboBox();
        cmbCode = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(sdf_manager.SDF_ManagerApp.class).getContext().getResourceMap(EditorRegion.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        jLabel3.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setName("jPanel1"); // NOI18N

        jLabel1.setIcon(resourceMap.getIcon("jLabel1.icon")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setIcon(resourceMap.getIcon("jLabel2.icon")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        btnSave.setText(resourceMap.getString("btnSave.text")); // NOI18N
        btnSave.setName("btnSave"); // NOI18N
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setText(resourceMap.getString("btnCancel.text")); // NOI18N
        btnCancel.setName("btnCancel"); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        cmbName.setName("cmbName"); // NOI18N
        cmbName.addItemListener(new java.awt.event.ItemListener() {
            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbNameItemStateChanged(evt);
            }
        });

        cmbCode.setName("cmbCode"); // NOI18N
        cmbCode.addItemListener(new java.awt.event.ItemListener() {
            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbCodeItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(23, 23, 23)
                        .addComponent(cmbCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addComponent(cmbName, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnSave)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancel)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cmbName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(42, 42, 42)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnSave))
                .addGap(93, 93, 93))
        );

        //jLabel4.setIcon(resourceMap.getIcon("jLabel4.icon")); // NOI18N
        jLabel4.setIcon(SDF_Util.getIconForLabel(resourceMap, "jLabel4.icon", SDF_ManagerApp.getMode()));
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel3))
                    .addComponent(jLabel4))
                .addGap(17, 17, 17)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    } // </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) { //GEN-FIRST:event_btnCancelActionPerformed
        this.exit();
    } //GEN-LAST:event_btnCancelActionPerformed

    private void cmbCodeItemStateChanged(java.awt.event.ItemEvent evt) { //GEN-FIRST:event_cmbCodeItemStateChanged
        if (evt.getStateChange() == 1 && this.editing == false) {
            this.editing = true;
            int i = cmbCode.getSelectedIndex();
            cmbName.setSelectedIndex(i);
            this.editing = false;
        }
    } //GEN-LAST:event_cmbCodeItemStateChanged

    private void cmbNameItemStateChanged(java.awt.event.ItemEvent evt) { //GEN-FIRST:event_cmbNameItemStateChanged
        if (this.editing == false) {
            int i = cmbName.getSelectedIndex();
            cmbCode.setSelectedIndex(i);
        }
    } //GEN-LAST:event_cmbNameItemStateChanged

    /**
     * Save administrative code of the location.
     *
     * @param evt Save event.
     */
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) { //GEN-FIRST:event_btnSaveActionPerformed

        int maxNameLength = 128;
        int maxCodeLength = SDF_ManagerApp.isEmeraldMode() ? 9 : 4;

        String code = cmbCode != null ? ((String) cmbCode.getSelectedItem()) : null;
        if (StringUtils.isBlank(code)) {
            String msg = "No code found for NUTS region!";
            LOGGER.error(msg);
            javax.swing.JOptionPane.showMessageDialog(this, msg);
        } else if (code.length() > maxCodeLength) {
            String msg = "Code is too long (max " + maxCodeLength + " characters allowed): " + code;
            EditorRegion.LOGGER.error(msg);
            javax.swing.JOptionPane.showMessageDialog(this, msg);
        }

        String name = null;
        String tableName = SDF_ManagerApp.isEmeraldMode() ? "RefNutsEmerald" : "RefNuts";
        String hql = "select refN.refNutsDescription from " + tableName + " refN where refN.refNutsCode like '" + code + "'";

        Session session = HibernateUtil.getSessionFactory().openSession();
        try {            
            Query query = session.createQuery(hql);
            name = (String) query.uniqueResult();

            if (StringUtils.isBlank(name)) {
                String msg = "No description found for NUTS region: " + code;
                LOGGER.error(msg);
                javax.swing.JOptionPane.showMessageDialog(this, msg);
            } else if (name.length() > maxNameLength) {
                String msg = "Name is too long (max " + maxNameLength + " characters allowed): " + name;
                LOGGER.error(msg);
                javax.swing.JOptionPane.showMessageDialog(this, msg);
            } else if (isNutExisting(code)) {
                String msg = "Site already has this region specified: " + code;
                LOGGER.error(msg);
                javax.swing.JOptionPane.showMessageDialog(this, msg);
            } else {
                Region r = new Region();
                r.setRegionCode(code);
                r.setRegionName(name);
                this.parent.addRegion(r);
                javax.swing.JOptionPane.showMessageDialog(this, "Region saved!");
                this.exit();
            }
        } catch (Exception e)  {
            String msg = "Technical error when attempting to look up the region information: " + e.toString();
            LOGGER.error(msg, e);
            javax.swing.JOptionPane.showMessageDialog(this, msg);
        } finally {
        	session.close();
        }                          
    }
  
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox cmbCode;
    private javax.swing.JComboBox cmbName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1; 
}
