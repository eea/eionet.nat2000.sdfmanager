/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ProgressDialog.java
 *
 * Created on 17-d√©c.-2010, 17:30:06
 */

package sdf_manager;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.ButtonGroup;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;

import org.apache.commons.lang.StringUtils;

/**
 * Dialog for entering common settings.
 * @author Kaido Laine
 */
public class SettingsDialog extends javax.swing.JDialog {

    private JTextField txtDatabaseHost;

    private JTextField txtDatabasePort;
    private JTextField txtDatabaseUser;
    private JTextField txtDatabasePassword;

    private final JButton btnSave = new JButton();
    private final JButton btnCancel = new JButton();

    private final ButtonGroup buttonGroup = new ButtonGroup();
    private final JRadioButton rdbtnEmerald = new JRadioButton();
    private final JRadioButton rdbtnNatura = new JRadioButton();

    /** Creates new settings dialog.
     * @param parent parent frame
     * @param modal indicates if the dialog is modal
     */
    public SettingsDialog(java.awt.Frame parent, boolean modal) {
        setResizable(false);
        initComponents();
        setDefaultCloseOperation(javax.swing.JDialog.DISPOSE_ON_CLOSE);
        centerScreen();
    }

    /**
     *
     */
    public void centerScreen() {
      Dimension dim = getToolkit().getScreenSize();
      Rectangle abounds = getBounds();
      setLocation((dim.width - abounds.width) / 2,
          (dim.height - abounds.height) / 2);
      super.setVisible(true);
      requestFocus();
   }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        javax.swing.JLabel versionLabel = new javax.swing.JLabel();
        javax.swing.JLabel appVersionLabel = new javax.swing.JLabel();

        //setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setName("Settings");

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application
                .getInstance(sdf_manager.SDF_ManagerApp.class).getContext()
                .getResourceMap(SettingsDialog.class);

        versionLabel.setFont(versionLabel.getFont().deriveFont(versionLabel.getFont().getStyle() | java.awt.Font.BOLD));
        versionLabel.setText(resourceMap.getString("versionLabel.text")); // NOI18N
        versionLabel.setName("versionLabel"); // NOI18N

        appVersionLabel.setText(resourceMap.getString("appVersionLabel.text")); // NOI18N
        appVersionLabel.setName("appVersionLabel"); // NOI18N

        //JButton btnSave = new JButton();
        btnSave.setText(resourceMap.getString("btnSave.text"));

        rdbtnEmerald.setText(resourceMap.getString("lblEmerald.text"));
        rdbtnNatura.setText(resourceMap.getString("lblNatura2000.text"));

        buttonGroup.add(rdbtnNatura);
        rdbtnNatura.setSelected(true);


        buttonGroup.add(rdbtnEmerald);

        txtDatabaseHost = new JTextField();
        txtDatabaseHost.setToolTipText("computer name or IP where the database is installed");
        //default host
        txtDatabaseHost.setText("127.0.0.1");
        txtDatabaseHost.setColumns(10);

        JLabel lblDatabaseHost = new JLabel();
        lblDatabaseHost.setText(resourceMap.getString("lblDatabaseHost.text"));
        lblDatabaseHost.setLabelFor(txtDatabaseHost);

        //JButton btnCancel = new JButton();

        btnSave.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                String validationResult = validateForm();
                if (StringUtils.isBlank(validationResult)) {
                    closeDialog(event);
                } else {
                    //show error and not allow close the dialog with "save"
                    JOptionPane.showMessageDialog(null, validationResult, "Validation Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        txtDatabasePort = new JTextField();
        txtDatabasePort.setText("3306");
        txtDatabasePort.setColumns(10);
        javax.swing.JLabel appTitleLabel = new javax.swing.JLabel();

                appTitleLabel.setFont(appTitleLabel.getFont().deriveFont(appTitleLabel.getFont().getStyle()
                        | java.awt.Font.BOLD, appTitleLabel.getFont().getSize() + 4));
                appTitleLabel.setText(resourceMap.getString("appTitleLabel.text")); // NOI18N
                appTitleLabel.setName("appTitleLabel");

        txtDatabaseUser = new JTextField();
        txtDatabaseUser.setColumns(10);

        txtDatabasePassword = new JTextField();
        txtDatabasePassword.setColumns(10);

        JLabel lblMode = new JLabel();
        lblMode.setLabelFor(rdbtnNatura);
        lblMode.setText(resourceMap.getString("lblMode.text"));
        lblMode.setName("lblMode");
        lblMode.setFont(new Font("Tahoma", Font.PLAIN, 11));

        btnCancel.setText(resourceMap.getString("btnCancel.text"));

        btnCancel.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                closeDialog(event);

            }
        });

        JLabel lblDatabasePort = new JLabel();
        lblDatabasePort.setText(resourceMap.getString("lblDatabasePort.text"));
        lblDatabasePort.setLabelFor(txtDatabasePort);

        JLabel lblUsername = new JLabel();
        lblUsername.setText(resourceMap.getString("lblUsername.text"));
        lblUsername.setLabelFor(txtDatabaseUser);
        lblUsername.setToolTipText("Username for database connection");

        JLabel lblPassword = new JLabel();
        lblPassword.setText(resourceMap.getString("lblPassword.text"));
        lblPassword.setLabelFor(txtDatabasePassword);

        JLabel lblN2kImage = new JLabel("");
        lblN2kImage.setIcon(new ImageIcon(SettingsDialog.class.getResource("/sdf_manager/images/n2k_logo_smaller.jpg")));

        JLabel lblNewLabel = new JLabel("");
        lblNewLabel.setIcon(new ImageIcon(SettingsDialog.class.getResource("/sdf_manager/images/emeraude_logo_smaller.png")));


        GroupLayout groupLayout = new GroupLayout(getContentPane());
        groupLayout.setHorizontalGroup(
            groupLayout.createParallelGroup(Alignment.LEADING)
                .addGroup(groupLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
                        .addComponent(versionLabel)
                        .addGroup(groupLayout.createSequentialGroup()
                            .addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
                                .addComponent(lblDatabaseHost)
                                .addComponent(lblDatabasePort, GroupLayout.PREFERRED_SIZE, 71, GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblUsername, GroupLayout.PREFERRED_SIZE, 71, GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblPassword, GroupLayout.PREFERRED_SIZE, 71, GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblMode, GroupLayout.PREFERRED_SIZE, 92, GroupLayout.PREFERRED_SIZE))
                            .addGap(18)
                            .addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
                                .addGroup(groupLayout.createParallelGroup(Alignment.LEADING, false)
                                    .addGroup(groupLayout.createSequentialGroup()
                                        .addComponent(btnSave)
                                        .addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnCancel))
                                    .addComponent(txtDatabasePassword)
                                    .addComponent(txtDatabaseUser)
                                    .addComponent(txtDatabasePort)
                                    .addComponent(txtDatabaseHost, GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE))
                                .addGroup(groupLayout.createSequentialGroup()
                                    .addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
                                        .addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
                                            .addComponent(rdbtnNatura)
                                            .addGroup(groupLayout.createSequentialGroup()
                                                .addPreferredGap(ComponentPlacement.RELATED)
                                                .addComponent(appVersionLabel)))
                                        .addComponent(rdbtnEmerald))
                                    .addGap(18)
                                    .addComponent(lblN2kImage)
                                    .addPreferredGap(ComponentPlacement.UNRELATED)
                                    .addComponent(lblNewLabel))))
                        .addComponent(appTitleLabel))
                    .addGap(84))
        );
        groupLayout.setVerticalGroup(
            groupLayout.createParallelGroup(Alignment.LEADING)
                .addGroup(groupLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(groupLayout.createParallelGroup(Alignment.TRAILING)
                        .addGroup(groupLayout.createSequentialGroup()
                            .addComponent(appTitleLabel)
                            .addPreferredGap(ComponentPlacement.RELATED)
                            .addGroup(groupLayout.createParallelGroup(Alignment.BASELINE)
                                .addComponent(versionLabel)
                                .addComponent(appVersionLabel))
                            .addPreferredGap(ComponentPlacement.RELATED)
                            .addGroup(groupLayout.createParallelGroup(Alignment.BASELINE)
                                .addComponent(rdbtnNatura)
                                .addComponent(lblMode))
                            .addPreferredGap(ComponentPlacement.RELATED)
                            .addComponent(rdbtnEmerald))
                        .addComponent(lblN2kImage)
                        .addComponent(lblNewLabel))
                    .addPreferredGap(ComponentPlacement.RELATED)
                    .addGroup(groupLayout.createParallelGroup(Alignment.BASELINE)
                        .addComponent(txtDatabaseHost, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblDatabaseHost))
                    .addPreferredGap(ComponentPlacement.RELATED)
                    .addGroup(groupLayout.createParallelGroup(Alignment.BASELINE)
                        .addComponent(txtDatabasePort, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblDatabasePort))
                    .addGap(18)
                    .addGroup(groupLayout.createParallelGroup(Alignment.BASELINE)
                        .addComponent(txtDatabaseUser, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblUsername))
                    .addPreferredGap(ComponentPlacement.RELATED)
                    .addGroup(groupLayout.createParallelGroup(Alignment.BASELINE)
                        .addComponent(txtDatabasePassword, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblPassword))
                    .addGap(7)
                    .addGroup(groupLayout.createParallelGroup(Alignment.BASELINE)
                        .addComponent(btnSave)
                        .addComponent(btnCancel))
                    .addContainerGap())
        );
        getContentPane().setLayout(groupLayout);

        pack();
    } // </editor-fold>//GEN-END:initComponents

    /**
     * close the dialog.
     * @param evt action event
     */
    private void closeDialog(java.awt.event.ActionEvent evt) {
        try {
            if (evt.getSource().equals(btnSave)) {
                // JOptionPane.showMessageDialog(null, "SAVE");
                launchMain(evt);
            }
        } finally {
            this.dispose();
        }
    }

    /**
     * launches main app if settings entered correctly.
     * @param evt window event
     */
    private void launchMain(ActionEvent evt) {
        SDF_ManagerApp.settingsEntered(this, null);
    }


    public JTextField getTxtDatabaseHost() {
        return txtDatabaseHost;
    }


    public JTextField getTxtDatabasePort() {
        return txtDatabasePort;
    }

    public JTextField getTxtDatabaseUser() {
        return txtDatabaseUser;
    }

    public JTextField getTxtDatabasePassword() {
        return txtDatabasePassword;
    }

    public ButtonGroup getButtonGroup() {
        return buttonGroup;
    }

    public JRadioButton getRdbtnEmerald() {
        return rdbtnEmerald;
    }

    public JRadioButton getRdbtnNatura() {
        return rdbtnNatura;
    }

    /**
     * checks if field values are valid.
     * @return validation error messages
     */

    private String validateForm() {
       String feedback = "";
       if (StringUtils.isEmpty(txtDatabaseHost.getText())) {
           feedback = "Database host is not specified.";
       }

       if (StringUtils.isEmpty(txtDatabasePort.getText())) {
           if (StringUtils.isNotBlank(feedback)) {
               feedback += "\n";
           }
           feedback +=  "Database port is not specified.";
       }
       if (!StringUtils.isNumeric(txtDatabasePort.getText())) {
           if (StringUtils.isNotBlank(feedback)) {
               feedback += "\n";
           }
           feedback +=  "Database port has to be a number.";
       }
       if (StringUtils.isEmpty(txtDatabaseUser.getText())) {
           if (StringUtils.isNotBlank(feedback)) {
               feedback += "\n";
           }
           feedback +=  "Database user is not specified.";
       }
       if (StringUtils.isEmpty(txtDatabasePassword.getText())) {
           if (StringUtils.isNotBlank(feedback)) {
               feedback += "\n";
           }
           feedback +=  "Password is not specified.";
       }

       return feedback;



    }
}
